name: veracode-policy-SAST   ### this workflow is for policy scans without the need to promote
on:
  workflow_call:
    inputs:                   ## inputs if "required" MUST be in caller workflow
      VERACODE_APP:
        required: true
        type: string
      VERACODE_CRITICALITY:   ##High
        required: true
        type: string
      VERACODE_EXCLUDE:       # ''
        required: true
        type: string
      VERACODE_INCLUDE:       # *
        required: true
        type: string
      PYTHON_INCLUDE:
        required: false
        type: boolean
      JAVA_INCLUDE:
        required: false
        type: boolean
      DOTNET_INCLUDE:           # true/false
        required: false
        type: boolean
      REACT_ANGULAR_INCLUDE:
        required: false
        type: boolean
      MVN_RUN:                # example - mvn clean package -f java
        required: false
        type: string
      DEPLOYMENT_STAGE:       # stg, prd
        required: false
        type: string
      REPOSITORY_NAME: 
        required: false
        type: string
      JAVA_VERSION:  
        required: false
        type: number
      MKDIR_AND_CP_TO_UPLOAD_DIR:  # mkdir dist && cp java/*/target/*.jar dist
        required: false
        type: string
      NODE_VERSION:
        required: false
        type: string
      SOLUTION_NAME:
        required: false
        type: string
      DEBUG_OPTION:
        required: false
        type: boolean
      DEBUG_TYPE:
        required: false
        type: string
      BUILD_FILE_TYPE:
        required: false
        type: string
      PUBLISH_FILE_TYPE:
        required: false
        type: string
    secrets:
      VERACODE_API_ID:
        required: true
      VERACODE_API_KEY:
        required: true
env:
  VERACODE_APP: ${{ inputs.VERACODE_APP }}
  MVN_RUN: ${{ inputs.MVN_RUN }}

jobs:
  Veracode-SAST-Scan-Python:
    name: SAST Scan Python
    runs-on: ubuntu-latest
    if: inputs.PYTHON_INCLUDE == true
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: create folder dist
        run: mkdir dist
      - name: install zip
        run: sudo apt-get install zip
      - name: download veracode zip script
        run: wget https://raw.githubusercontent.com/gravicore/github-actions/main/python-sast.py
      - name: create-python-archive
        shell: bash
        run: |
         python python-sast.py
         ls -a
         mv veracode_static_sast* dist/
      - name: Branch Name Var
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF}"  >> $GITHUB_ENV
      - name: Gather time stamp
        run:  echo "CURRENT_TIME=$(date +"%y%m%d%H%M%S")" >> $GITHUB_ENV
      - name: Setup Java
        uses: actions/setup-java@v3.8.0 # Make java accessible on path so the uploadandscan action can run.
        with: 
          java-version: '8'
      - uses: veracode/veracode-uploadandscan-action@0.2.4 # Run the uploadandscan action. Inputs are described above.
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/', '.vscode/') != '') }}
        with:
          version: 'RunID:${{ github.run_id }} DateStamp:${{ env.CURRENT_TIME }}'
          filepath: 'dist/'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          exclude: '${{ inputs.VERACODE_EXCLUDE }}'
          include: '${{ inputs.VERACODE_INCLUDE }}'
          criticality: '${{ inputs.VERACODE_CRITICALITY }}'
          appname: '${{ env.VERACODE_APP }}'
  Veracode-SAST-Scan-Java:
    name: SAST Scan Java
    runs-on: ubuntu-latest
    if: inputs.JAVA_INCLUDE == true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK '${{ inputs.JAVA_VERSION }}'
        uses: actions/setup-java@v3.8.0
        with:
          java-version: '${{ inputs.JAVA_VERSION }}'
      - name: Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: ${{ env.MVN_RUN }}
      - name: Move files to dist folder
        shell: bash
        run: ${{ inputs.MKDIR_AND_CP_TO_UPLOAD_DIR }}
      - name: Gather time stamp
        run:  echo "CURRENT_TIME=$(date +"%y%m%d%H%M%S")" >> $GITHUB_ENV
      - name: Branch Name Var
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF}"  >> $GITHUB_ENV
      - name: Setup Java
        uses: actions/setup-java@v3.8.0 # Make java accessible on path so the uploadandscan action can run.
        with: 
          java-version: '8'
      - uses: veracode/veracode-uploadandscan-action@0.2.4 # Run the uploadandscan action. Inputs are described above.
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/', '.vscode/') != '') }}
        with:
          version: 'RunID:${{ github.run_id }} DateStamp:${{ env.CURRENT_TIME }}'
          filepath: 'dist/'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          exclude: '${{ inputs.VERACODE_EXCLUDE }}'
          include: '${{ inputs.VERACODE_INCLUDE }}'
          criticality: '${{ inputs.VERACODE_CRITICALITY }}'
          appname: '${{ env.VERACODE_APP }}'
  Veracode-SAST-Scan-React-Angular:    
    name: SAST Scan React
    runs-on: ubuntu-latest
    if: inputs.REACT_ANGULAR_INCLUDE == true
    steps:    
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{inputs.NODE_VERSION}}
      - name: Install Dependencies
        run: yarn install
      - name: Prepare Artifacts
        shell: bash
        run: zip -r ${{ inputs.REPOSITORY_NAME }}_${{ inputs.DEPLOYMENT_STAGE }}_${{ github.run_id }}.zip src '*.asp' '*.css' '*.ehtml' '*.es' '*.es6' '*.handlebars' '*.hbs' '*.hjs' '*.htm' '*.html' '*.js' '*.jsx' '*.json' '*.jsp' '*.map' '*.mustache' '*.php' '*.ts' '*.tsx' '*.vue' '*.xhtml'
      - name: Prepare SCA files
        shell: bash
        run: zip -r ${{ inputs.REPOSITORY_NAME }}_${{ inputs.DEPLOYMENT_STAGE }}_${{ github.run_id }}.zip node_modules 'npm-shrinkwrap.json' 'package-lock.json' 'package.json' 'yarn.lock'
      - name: Gather time stamp
        run:  echo "CURRENT_TIME=$(date +"%y%m%d%H%M%S")" >> $GITHUB_ENV
      - name: Branch Name Var
        run: echo "BRANCH_NAME=${GITHUB_HEAD_REF}"  >> $GITHUB_ENV
      - uses: veracode/veracode-uploadandscan-action@0.2.4 # Run the uploadandscan action. Inputs are described above.
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/', '.vscode/') != '') }}
        with:
          version: 'RunID:${{ github.run_id }} DateStamp:${{ env.CURRENT_TIME }}'
          filepath: '${{ inputs.REPOSITORY_NAME }}_${{ inputs.DEPLOYMENT_STAGE }}_${{ github.run_id }}.zip'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          exclude: '${{ inputs.VERACODE_EXCLUDE }}'
          include: '${{ inputs.VERACODE_INCLUDE }}'
          criticality: '${{ inputs.VERACODE_CRITICALITY }}'
          appname: '${{ env.VERACODE_APP }}'
  Veracode-SAST-Scan-DotNet:
    # START CONFIGURATION
    name: SAST-Scan-DotNet
    if: inputs.DOTNET_INCLUDE == true
    # END CONFIGURATION
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:3.1-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: "Build"
        run: |
          apk add p7zip
          dotnet restore ./${{inputs.SOLUTION_NAME}}/${{inputs.SOLUTION_NAME}}.${{inputs.BUILD_FILE_TYPE}}
          dotnet build --no-restore ./${{inputs.SOLUTION_NAME}}/${{inputs.SOLUTION_NAME}}.${{inputs.BUILD_FILE_TYPE}} -p:DebugType=${{inputs.DEBUG_TYPE}} -p:DebugSymbols=${{inputs.DEBUG_OPTION}}
          dotnet publish --no-build ./${{inputs.SOLUTION_NAME}}/${{inputs.SOLUTION_NAME}}.${{inputs.PUBLISH_FILE_TYPE}} -o ./dist/${{inputs.SOLUTION_NAME}}/ -p:DebugType=${{inputs.DEBUG_TYPE}} -p:DebugSymbols=${{inputs.DEBUG_OPTION}}
          cd ./dist/${{inputs.SOLUTION_NAME}}/ && 7z a -tzip ../app.zip .
      - name: Gather time stamp
        run:  echo "CURRENT_TIME=$(date +"%y%m%d%H%M%S")" >> $GITHUB_ENV
      - name: Setup Java
        uses: actions/setup-java@v1 # Make java accessible on path so the uploadandscan action can run.
        with: 
          java-version: '8'
      - uses: veracode/veracode-uploadandscan-action@0.2.4 # Run the uploadandscan action. Inputs are described above.
        with:
          version: 'RunID:${{ github.run_id }} DateStamp:${{ env.CURRENT_TIME }}'
          filepath: 'dist/app.zip'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          exclude: '${{ inputs.VERACODE_EXCLUDE }}'
          include: '${{ inputs.VERACODE_INCLUDE }}'
          criticality: '${{ inputs.VERACODE_CRITICALITY }}'
          appname: '${{ env.VERACODE_APP }}'
