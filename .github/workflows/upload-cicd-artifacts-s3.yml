name: "upload-cicd-artifacts-s3"
on:
  workflow_call:
    inputs:                ## inputs if "required" MUST be in caller workflow
      AWS_DEFAULT_REGION:  ## #us-east-1
        required: true
        type: string
      DEPLOYMENT_STAGE:    ## stg, prd
        required: true
        type: string
      NAMESPACE:           ## cel
        required: true
        type: string
      ENVIRONMENT:         # srv, client, borrower
        required: true
        type: string
      PYTHON_INCLUDE:      # true/false
        required: false
        type: boolean
      JAVA_INCLUDE:        # true/false
        required: false
        type: boolean
      REACT_INCLUDE:       # true/false
        required: false
        type: boolean
      ANGULAR_INCLUDE:     # true/false
        required: false
        type: boolean
      REACT_ANGULAR_BUILD_DIR:
        required: false
        type: string
      EMBED_CONFIG_CHAMBER: # if react/angular
        required: false
        type: string
      EMBED_CONFIG_RUN:     # if react/angular
        required: false
        type: string
      BUILD_RUN:            # if react/angular
        required: false
        type: string
      NODE_VERSION:         # if react/angular
        required: false
        type: number
    secrets:
      PRD_AWS_ACCESS_KEY_ID:
        required: false
      PRD_AWS_ACCESS_KEY_SECRET:
        required: false      
env: 
  DEPLOYMENT_STAGE: ${{ inputs.DEPLOYMENT_STAGE }}
  AWS_DEFAULT_REGION: ${{ inputs.AWS_DEFAULT_REGION }}
  NAMESPACE: ${{ inputs.NAMESPACE }} 
  ENVIRONMENT: ${{ inputs.ENVIRONMENT }} 
jobs:  
  upload-artifacts-s3-python-java:
    name: Artifacts Upload S3 Python or Java
    if: ${{ (inputs.PYTHON_INCLUDE == true) || (inputs.JAVA_INCLUDE == true) }}
    runs-on: ubuntu-latest
    container: gravicore/alpine-node-aws-chamber
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download All Artifacts        
        uses: actions/download-artifact@v3
        with:
          path: dist
      - name: Upload Project Artifacts
        uses: actions/download-artifact@v3
        with:
          name: project-artifacts
      - name: Display structure of downloaded files
        working-directory: dist
        run: ls -R
      - name: Variablize version tag
        run: cat version_tag.txt >> $GITHUB_ENV
      - name: create folder dist
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') && ( inputs.PYTHON_INCLUDE == 'true') }}
        run: mkdir dist
      - name: install zip
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') && ( inputs.PYTHON_INCLUDE == 'true') }}
        run: | 
          apk add zip
      - name: Set up Python 3.6
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') && ( inputs.PYTHON_INCLUDE == 'true') }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: download veracode zip script
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') && ( inputs.PYTHON_INCLUDE == 'true') }}
        run: | 
          wget https://raw.githubusercontent.com/gravicore/github-actions/main/python-sast.py
      - name: Prepare Python Artifacts
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') && ( inputs.PYTHON_INCLUDE == 'true') }}
        run: |
          python python-sast.py
          ls -a
          mv veracode_static_sast* dist/
      - name: Rename Zip file
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') && ( inputs.PYTHON_INCLUDE == 'true') }}
        run: |
          cd dist
          ls -a
          mv *.zip ${{ github.event.repository.name }}_${{ env.DEPLOYMENT_STAGE }}_${{ env.versioning_new_tag }}_$(echo ${GITHUB_SHA} | cut -c1-8)_${{ github.run_id }}.zip
      - name: Prepare Java Artifacts
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') && ( inputs.JAVA_INCLUDE == 'true') }}
        run: mkdir -p dist/${{ github.event.repository.name }}_${{ env.DEPLOYMENT_STAGE }}_${{ env.versioning_new_tag }}_$(echo ${GITHUB_SHA} | cut -c1-8)_${{ github.run_id }} && cp *.jar dist/${{ github.event.repository.name }}_${{ env.DEPLOYMENT_STAGE }}_${{ env.versioning_new_tag }}_$(echo ${GITHUB_SHA} | cut -c1-8)_${{ github.run_id }}
      - name: Configure AWS credentials from Account
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRD_AWS_ACCESS_KEY_SECRET}}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Publish to S3 Python
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') && ( inputs.PYTHON_INCLUDE == 'true') }}
        run: |
          export $(chamber exec $NAMESPACE-$ENVIRONMENT-$DEPLOYMENT_STAGE -- env | grep -e CICD_ARTIFACTS_BUCKET_ID)
          aws s3 cp ./dist/* s3://$CICD_ARTIFACTS_BUCKET_ID/artifacts_github/${{ github.event.repository.name }}/
      - name: Publish to S3 Java
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') && ( inputs.JAVA_INCLUDE == 'true') }}
        run: |
          export $(chamber exec $NAMESPACE-$ENVIRONMENT-$DEPLOYMENT_STAGE -- env | grep -e CICD_ARTIFACTS_BUCKET_ID)
          aws s3 sync ./dist/* s3://$CICD_ARTIFACTS_BUCKET_ID/artifacts_github/${{ github.event.repository.name }}/${{ github.event.repository.name }}_${{ env.DEPLOYMENT_STAGE }}_${{ env.versioning_new_tag }}_$(echo ${GITHUB_SHA} | cut -c1-8)_${{ github.run_id }}
  upload-artifacts-s3-angular-react:
    name: Artifacts Upload S3 React or Angular
    if: ${{ (inputs.REACT_INCLUDE == true) || (inputs.ANGULAR_INCLUDE == true) }}
    runs-on: ubuntu-latest
    container: gravicore/alpine-node-aws-chamber
    steps:
      - name: Download Project Artifacts
        uses: actions/download-artifact@v2
        with:
          name: project-artifacts
      - name: Variablize version tag
        run: cat version_tag.txt >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ inputs.NODE_VERSION }}
      - name: Install Dependencies
        run: yarn install
      - name: Embed Config
        run: |
          mkdir -p src/environments
          export DEPLOYMENT_STAGE=${{env.DEPLOYMENT_STAGE}}
          chamber export $ENVIRONMENT_PREFIX-$DEPLOYMENT_STAGE ${{ inputs.EMBED_CONFIG_CHAMBER }}
          ${{ inputs.EMBED_CONFIG_RUN }}
      - name:  Build
        run: |
          ${{ inputs.BUILD_RUN }}
      - name: install zip
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') }}
        run: apk add zip
      - name: Prepare Artifacts React/Angulart
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') }}
        run: |
          zip -r ${{ github.event.repository.name }}_${{ env.DEPLOYMENT_STAGE }}_${{ env.versioning_new_tag }}_$(echo ${GITHUB_SHA} | cut -c1-8)_${{ github.run_id }}.zip ${{ inputs.REACT_ANGULAR_BUILD_DIR }}
          mkdir dist && mv *.zip dist
      - name: Configure AWS credentials from Account
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRD_AWS_ACCESS_KEY_SECRET}}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Publish to S3
        if: ${{ (hashFiles('python/', 'java/', 'react/', 'angular/', 'src/') != '') }}
        run: |
          export $(chamber exec $NAMESPACE-$ENVIRONMENT-$DEPLOYMENT_STAGE -- env | grep -e CICD_ARTIFACTS_BUCKET_ID)
          aws s3 cp ./dist/* s3://$CICD_ARTIFACTS_BUCKET_ID/artifacts_github/${{ github.event.repository.name }}/
