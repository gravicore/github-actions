name: "terragrunt-build-deploy"
on:
  workflow_call:
    inputs:                           ## inputs if "required" MUST be in caller workflow
      TF_VAR_STAGE:                   ## dev, stg, or prd
        required: true
        type: string
      JIRA_ENV_TYPE:                  ## development, stage, or production
        required: true
        type: string
     TERRAGRUNT_PARALLELISM:
        type: number
      TF_VERSION:
        required: true
        type: string
      TG_VERSION:
        required: true
        type: string
      TF_WORKING_DIR:
        required: true
        type: string            
      TERRAFORM_PRE_APPLY_SUBFOLDERS:
        required: true
        type: string            
      TERRAGRUNT_LOG_LEVEL:
        required: true
        type: string
    secrets:
      DEV_AWS_ACCESS_KEY_ID:
      DEV_AWS_ACCESS_KEY_SECRET:
      STG_AWS_ACCESS_KEY_ID:
      STG_AWS_ACCESS_KEY_SECRET:
      PRD_AWS_ACCESS_KEY_ID:
      PRD_AWS_ACCESS_KEY_SECRET:
      JIRA_CLIENT_ID:
        required: true
      JIRA_CLIENT_SECRET:
        required: true

env:
  TF_VAR_STAGE: ${{ inputs.TF_VAR_STAGE }}
  JIRA_ENV_TYPE: ${{ inputs.JIRA_ENV_TYPE }}
  LAMBDA_MOVE_ARTIFACT_SCRIPT: mkdir dist && cp *.jar dist
  TERRAGRUNT_PARALLELISM: ${{ inputs.TERRAGRUNT_PARALLELISM }}
  TF_VERSION: ${{ inputs.TF_VERSION }}
  TG_VERSION: ${{ inputs.TG_VERSION }}
  TF_WORKING_DIR: ${{ inputs.TF_WORKING_DIR }}
  TERRAFORM_PRE_APPLY_SUBFOLDERS: ${{ inputs.TERRAFORM_PRE_APPLY_SUBFOLDERS }}
  TERRAGRUNT_LOG_LEVEL: ${{ inputs.TERRAGRUNT_LOG_LEVEL }}
jobs:

  terragrunt-pre-apply:
    name: "Terragrunt Pre Apply ${{ env.TF_VAR_STAGE }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform        
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}
      - name: Lint Terraform
        run: terraform fmt -recursive -check
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Lint Terragrunt
        run: terragrunt hclfmt --terragrunt-check
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Download Project Artifacts
        uses: actions/download-artifact@v2
        with:
          name: project-artifacts  
      - name: Move to dist
        run: ${{ env.LAMBDA_MOVE_ARTIFACT_SCRIPT }}         
      - name: Pre-validate Apply Steps
        env:
          FILES: ${{env.TERRAFORM_PRE_APPLY_SUBFOLDERS}}
        run: for f in $FILES; do terragrunt apply -auto-approve --terragrunt-working-dir $f --terragrunt-non-interactive --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}; done

  terragrunt-plan:
    # START CONFIGURATION
    name: "Terragrunt Plan ${{ env.TF_VAR_STAGE }}"
    needs: terragrunt-pre-apply
    env:
      AWS_ACCESS_KEY_ID: ${{ ( secrets.DEV_AWS_ACCESS_KEY_ID || secrets.STG_AWS_ACCESS_KEY_ID || secrets.PRD_AWS_ACCESS_KEY_ID ) }}
      AWS_SECRET_ACCESS_KEY: ${{ ( secrets.DEV_AWS_ACCESS_KEY_ID || secrets.STG_AWS_ACCESS_KEY_ID || secrets.PRD_AWS_ACCESS_KEY_ID ) }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # END CONFIGURATION
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse Jira Keys from Commit
        id: jira_keys
        if: always()
        uses: HighwayThree/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Format Jira Keys
        run: |
          JIRA_KEYS="${{ steps.jira_keys.outputs.jira-keys }}"
          echo "${JIRA_KEYS}" >> .tmp_jira_keys
          echo "JIRA_KEYS=$(grep -o '[A-Z]\+-[0-9]\+' .tmp_jira_keys | tr '\n' ',' | sed 's/,*$//')" >> $GITHUB_ENV
      - name: Echo Jira Keys
        run: |
          echo "Jira Keys: ${{env.JIRA_KEYS}}"
      - name: Download Project Artifacts
        uses: actions/download-artifact@v2
        with:
          name: project-artifacts  
      - name: Move to dist
        run: ${{ env.LAMBDA_MOVE_ARTIFACT_SCRIPT }}         
      - name: Setup AWS CLI
        uses: unfor19/install-aws-cli-action@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}
      - name: Validate Terraform
        run: terragrunt validate
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Plan Terraform Parallel
        if: ${{ ( env.TERRAGRUNT_PARALLELISM != '') }}
        run: terragrunt run-all plan --terragrunt-non-interactive --terragrunt-parallelism ${{ env.TERRAGRUNT_PARALLELISM }} --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }} 
      - name: Plan Terraform
        if: ${{ ( env.TERRAGRUNT_PARALLELISM == '') }}
        run: terragrunt run-all plan --terragrunt-non-interactive --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Confirm Build
        run: |
          echo "Planning ${{ env.TF_VAR_STAGE }}..."
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "BUILD_STATE=successful"  >> $GITHUB_ENV
      - name: Confirm Build State and Jira Key Values
        if: always()
        run: |
          echo "BUILD_STATE: ${{env.BUILD_STATE}}"
          echo "Jira Keys: ${{env.JIRA_KEYS}}"
      - name: Failed Deployment
        if: failure()
        run: echo "BUILD_STATE=failed" >> $GITHUB_ENV
      - name: Push Build Info to Jira
        if: "${{ env.JIRA_KEYS != '' }}"
        id: push_build_info_to_jira
        uses: HighwayThree/jira-upload-build-info@master
        with:
          pipeline-id: '${{ github.repository }} ${{ github.workflow }} ${{ env.TF_VAR_STAGE }}'
          client-id: '${{ secrets.JIRA_CLIENT_ID }}'
          client-secret: '${{ secrets.JIRA_CLIENT_SECRET }}'
          cloud-instance-base-url: 'https://celink.atlassian.net/'
          issue-keys: "${{ env.JIRA_KEYS }}"
          build-state: "${{ env.BUILD_STATE }}"
          build-display-name: '${{ github.workflow }}: ${{ env.TF_VAR_STAGE }}'
          build-url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          build-ref-url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"

  terragrunt-apply:
    # START CONFIGURATION
    name: "Terragrunt Apply ${{ env.TF_VAR_STAGE }}"
    needs: terragrunt-plan
    env:
      AWS_ACCESS_KEY_ID: ${{ ( secrets.DEV_AWS_ACCESS_KEY_ID || secrets.STG_AWS_ACCESS_KEY_ID || secrets.PRD_AWS_ACCESS_KEY_ID ) }}
      AWS_SECRET_ACCESS_KEY: ${{ ( secrets.DEV_AWS_ACCESS_KEY_ID || secrets.STG_AWS_ACCESS_KEY_ID || secrets.PRD_AWS_ACCESS_KEY_ID ) }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    environment: ${{ env.TF_VAR_STAGE }}
    # END CONFIGURATION
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse Jira Keys from Commit
        id: jira_keys
        if: always()
        uses: HighwayThree/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Format Jira Keys
        run: |
          JIRA_KEYS="${{ steps.jira_keys.outputs.jira-keys }}"
          echo "${JIRA_KEYS}" >> .tmp_jira_keys
          echo "JIRA_KEYS=$(grep -o '[A-Z]\+-[0-9]\+' .tmp_jira_keys | tr '\n' ',' | sed 's/,*$//')" >> $GITHUB_ENV
      - name: Download Project Artifacts
        uses: actions/download-artifact@v2
        with:
          name: project-artifacts
      - name: Move to dist
        run: ${{ env.LAMBDA_MOVE_ARTIFACT_SCRIPT }}         
      - name: Setup AWS CLI
        uses: unfor19/install-aws-cli-action@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform          
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}
      - name: Apply Terraform
        if: ${{ ( env.TERRAGRUNT_PARALLELISM != '') }}
        run: terragrunt run-all apply --terragrunt-non-interactive --terragrunt-parallelism ${{ env.TERRAGRUNT_PARALLELISM }} --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Apply Terraform
        if: ${{ ( env.TERRAGRUNT_PARALLELISM == '') }}
        run: terragrunt run-all apply --terragrunt-non-interactive --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Confirm Deploy
        run: |
          echo "Deploying to ${{ env.TF_VAR_STAGE }}..."
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "DEPLOY_STATE=successful"  >> $GITHUB_ENV
      - name: Confirm Deploy State and Jira Key Values
        if: always()
        run: |
          echo "DEPLOY_STATE: ${{env.DEPLOY_STATE}}"
          echo "Jira Keys: ${{env.JIRA_KEYS}}"
      - name: Failed Deployment
        if: failure()
        run: echo "DEPLOY_STATE=failed" >> $GITHUB_ENV
      - name: Push Deployment Info to Jira
        if: "${{ env.JIRA_KEYS != '' }}"
        id: push_deployment_info_to_jira
        uses: HighwayThree/jira-upload-deployment-info@master
        with:
          client-id: "${{ secrets.JIRA_CLIENT_ID }}"
          client-secret: "${{ secrets.JIRA_CLIENT_SECRET }}"
          cloud-instance-base-url: "https://celink.atlassian.net/"
          deployment-sequence-number: "${{ github.run_id }}"
          update-sequence-number: "${{ github.run_id }}"
          issue-keys: "${{ env.JIRA_KEYS }}"
          display-name: "${{ env.TF_VAR_STAGE }} Run ID #${{github.run_id}}"
          url: "${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          description: "${{ env.TF_VAR_STAGE }} Deployment"
          last-updated: "${{github.event.head_commit.timestamp}}"
          label: "${{ env.TF_VAR_STAGE }} Deployment Label"
          state: "${{env.DEPLOY_STATE}}"
          pipeline-id: "${{ github.repository }} ${{ github.workflow }}"
          pipeline-display-name: "${{ github.workflow }} (#${{ github.run_number }})"
          pipeline-url: "${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          environment-id: "${{ env.TF_VAR_STAGE }}"
          environment-display-name: "${{ env.TF_VAR_STAGE }}"
          environment-type: "${{ env.JIRA_ENV_TYPE }}"
