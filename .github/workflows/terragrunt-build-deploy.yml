name: "terragrunt-build-deploy"
on:
  workflow_call:
    inputs: ## inputs if "required" MUST be in caller workflow
      TF_VAR_stage: ## dev, stg, or prd
        required: true
        type: string
      JIRA_ENV_TYPE: ## development, staging, or production
        required: true
        type: string
      TERRAGRUNT_PARALLELISM:
        required: false
        type: number
      TF_VERSION:
        required: true
        type: string
      TG_VERSION:
        required: true
        type: string
      TF_WORKING_DIR:
        required: true
        type: string
      TERRAFORM_PRE_APPLY_SUBFOLDERS:
        required: true
        type: string
      TERRAGRUNT_LOG_LEVEL:
        required: true
        type: string
      ARTIFACTS_INCLUDE:
        required: false
        type: boolean
      LAMBDA_MOVE_ARTIFACT_SCRIPT:
        required: false
        type: string
      RUNNER:
        required: true
        type: string
      UPLOAD_ARTIFACT_NAME:
        required: false
        type: string
      ATLASSIAN_URL:
        required: true
        type: string
      APPSYNC_MERGE:
        required: false
        type: string
        default: ""
      JIRA_ID_FROM_BRANCH:
        required: false
        type: boolean
        default: false  
    secrets:
      DEV_AWS_ACCESS_KEY_ID:
        required: false
      DEV_AWS_ACCESS_KEY_SECRET:
        required: false
      STG_AWS_ACCESS_KEY_ID:
        required: false
      STG_AWS_ACCESS_KEY_SECRET:
        required: false
      PRD_AWS_ACCESS_KEY_ID:
        required: false
      PRD_AWS_ACCESS_KEY_SECRET:
        required: false
      JIRA_CLIENT_ID:
        required: true
      JIRA_CLIENT_SECRET:
        required: true
    outputs:
      results:
        description: "The result values for AppSync Merge"
        value: ${{ jobs.terragrunt-apply.outputs.results }}
env:
  JIRA_ENV_TYPE: ${{ inputs.JIRA_ENV_TYPE }}
  LAMBDA_MOVE_ARTIFACT_SCRIPT: ${{ inputs.LAMBDA_MOVE_ARTIFACT_SCRIPT }}
  TF_VERSION: ${{ inputs.TF_VERSION }}
  TG_VERSION: ${{ inputs.TG_VERSION }}
  TF_WORKING_DIR: ${{ inputs.TF_WORKING_DIR }}
  TERRAFORM_PRE_APPLY_SUBFOLDERS: ${{ inputs.TERRAFORM_PRE_APPLY_SUBFOLDERS }}
  TERRAGRUNT_LOG_LEVEL: ${{ inputs.TERRAGRUNT_LOG_LEVEL }}
jobs:
  terragrunt-pre-apply:
    name: "Terragrunt Pre Apply"
    env:
      TF_VAR_stage: ${{ inputs.TF_VAR_stage }}
      AWS_ACCESS_KEY_ID: ${{ ( secrets.DEV_AWS_ACCESS_KEY_ID || secrets.STG_AWS_ACCESS_KEY_ID || secrets.PRD_AWS_ACCESS_KEY_ID ) }}
      AWS_SECRET_ACCESS_KEY: ${{ ( secrets.DEV_AWS_ACCESS_KEY_SECRET || secrets.STG_AWS_ACCESS_KEY_SECRET || secrets.PRD_AWS_ACCESS_KEY_SECRET ) }}
    runs-on: ${{ inputs.RUNNER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.TG_VERSION }}
      - name: Lint Terraform
        run: terraform fmt -recursive -check
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Lint Terragrunt
        run: terragrunt hclfmt --terragrunt-check
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Download Project Artifacts
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ inputs.UPLOAD_ARTIFACT_NAME }}
          merge-multiple: true
      - name: Move to dist
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        run: ${{ env.LAMBDA_MOVE_ARTIFACT_SCRIPT }}
      - name: Pre-validate Apply Steps
        env:
          FILES: ${{env.TERRAFORM_PRE_APPLY_SUBFOLDERS}}
        run: for f in $FILES; do terragrunt apply -auto-approve --terragrunt-working-dir $f --terragrunt-non-interactive --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}; done
  terragrunt-plan:
    # START CONFIGURATION
    name: "Terragrunt Plan"
    needs: terragrunt-pre-apply
    env:
      TF_VAR_stage: ${{ inputs.TF_VAR_stage }}
      AWS_ACCESS_KEY_ID: ${{ ( secrets.DEV_AWS_ACCESS_KEY_ID || secrets.STG_AWS_ACCESS_KEY_ID || secrets.PRD_AWS_ACCESS_KEY_ID ) }}
      AWS_SECRET_ACCESS_KEY: ${{ ( secrets.DEV_AWS_ACCESS_KEY_SECRET || secrets.STG_AWS_ACCESS_KEY_SECRET || secrets.PRD_AWS_ACCESS_KEY_SECRET ) }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # END CONFIGURATION
    runs-on: ${{ inputs.RUNNER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Parse Jira Keys from Commit
        id: jira_keys
        if: ${{ (inputs.JIRA_ID_FROM_BRANCH == false) }}
        uses: gravicore/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Format Jira Keys
        if: ${{ (inputs.JIRA_ID_FROM_BRANCH == false) }}
        run: |
          JIRA_KEYS="${{ steps.jira_keys.outputs.jira-keys }}"
          echo "${JIRA_KEYS}" >> .tmp_jira_keys
          echo "JIRA_KEYS=$(grep -o '[A-Z]\+-[0-9]\+' .tmp_jira_keys | tr '\n' ',' | sed 's/,*$//')" >> $GITHUB_ENV
      - name: Get Branch Name
        if: ${{ (inputs.JIRA_ID_FROM_BRANCH == true) }}
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi
      - name: Extract and Convert JIRA Keys to Uppercase
        if: ${{ (inputs.JIRA_ID_FROM_BRANCH == true) }}
        run: |
          JIRA_KEYS=$(echo "$BRANCH_NAME" | grep -oEi '^[a-z]+-[0-9]+' || true)
          if [ -n "$JIRA_KEYS" ]; then
            # Convert to uppercase
            JIRA_KEYS_UPPER=$(echo "$JIRA_KEYS" | tr '[:lower:]' '[:upper:]')
            echo "JIRA_KEYS=$JIRA_KEYS_UPPER" >> $GITHUB_ENV
            echo "JIRA_KEYS found and set: $JIRA_KEYS_UPPER"
          else
            echo "Branch name does not contain a valid JIRA key pattern. Skipping JIRA key extraction."
            echo "JIRA_KEYS=" >> $GITHUB_ENV
          fi
      - name: Print JIRA Keys and Branch Name
        if: env.JIRA_KEYS != ''
        run: |
          echo "JIRA Keys: $JIRA_KEYS"
      - name: Skip JIRA Keys Extraction
        if: env.JIRA_KEYS == ''
        run: |
          echo "No valid JIRA keys were found. Skipping steps related to JIRA keys."
      - name: Download Project Artifacts
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ inputs.UPLOAD_ARTIFACT_NAME }}
          merge-multiple: true
      - name: Move to dist
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        run: ${{ env.LAMBDA_MOVE_ARTIFACT_SCRIPT }}
      - name: Setup AWS CLI
        uses: unfor19/install-aws-cli-action@v1.0.4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.TG_VERSION }}
      - name: Validate Terraform
        run: terragrunt validate
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Plan Terraform
        if: ${{ ( inputs.TERRAGRUNT_PARALLELISM == '0') }}
        run: terragrunt run-all plan --terragrunt-non-interactive --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Plan Terraform Parallel
        if: ${{ ( inputs.TERRAGRUNT_PARALLELISM != '0') }}
        run: terragrunt run-all plan --terragrunt-non-interactive --terragrunt-parallelism ${{ inputs.TERRAGRUNT_PARALLELISM }} --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Confirm Build
        run: |
          echo "Planning ${{ inputs.TF_VAR_stage }}..."
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "BUILD_STATE=successful"  >> $GITHUB_ENV
      - name: Confirm Build State and Jira Key Values
        if: always()
        run: |
          echo "BUILD_STATE: ${{env.BUILD_STATE}}"
          echo "Jira Keys: ${{env.JIRA_KEYS}}"
      - name: Failed Deployment
        if: failure()
        run: echo "BUILD_STATE=failed" >> $GITHUB_ENV
      - name: Push Build Info to Jira
        if: "${{ env.JIRA_KEYS != '' }}"
        id: push_build_info_to_jira
        uses: gravicore/jira-upload-build-info@master
        with:
          pipeline-id: "${{ github.repository }} ${{ github.workflow }} ${{ inputs.TF_VAR_stage }}"
          client-id: "${{ secrets.JIRA_CLIENT_ID }}"
          client-secret: "${{ secrets.JIRA_CLIENT_SECRET }}"
          cloud-instance-base-url: "${{ inputs.ATLASSIAN_URL }}"
          issue-keys: "${{ env.JIRA_KEYS }}"
          build-state: "${{ env.BUILD_STATE }}"
          build-display-name: "${{ github.workflow }}: ${{ inputs.TF_VAR_stage }}"
          build-url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          build-ref-url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
  terragrunt-apply:
    # START CONFIGURATION
    name: "Terragrunt Apply"
    needs: terragrunt-plan
    env:
      TF_VAR_stage: ${{ inputs.TF_VAR_stage }}
      AWS_ACCESS_KEY_ID: ${{ ( secrets.DEV_AWS_ACCESS_KEY_ID || secrets.STG_AWS_ACCESS_KEY_ID || secrets.PRD_AWS_ACCESS_KEY_ID ) }}
      AWS_SECRET_ACCESS_KEY: ${{ ( secrets.DEV_AWS_ACCESS_KEY_SECRET || secrets.STG_AWS_ACCESS_KEY_SECRET || secrets.PRD_AWS_ACCESS_KEY_SECRET ) }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    environment:
      name: ${{ inputs.TF_VAR_stage }}
    outputs:
      results: ${{ steps.appsync_merge.outputs.results }}
    # END CONFIGURATION
    runs-on: ${{ inputs.RUNNER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Parse Jira Keys from Commit
        id: jira_keys
        if: ${{ (inputs.JIRA_ID_FROM_BRANCH == false) }}
        uses: gravicore/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Format Jira Keys
        if: ${{ (inputs.JIRA_ID_FROM_BRANCH == false) }}
        run: |
          JIRA_KEYS="${{ steps.jira_keys.outputs.jira-keys }}"
          echo "${JIRA_KEYS}" >> .tmp_jira_keys
          echo "JIRA_KEYS=$(grep -o '[A-Z]\+-[0-9]\+' .tmp_jira_keys | tr '\n' ',' | sed 's/,*$//')" >> $GITHUB_ENV
      - name: Get Branch Name
        if: ${{ (inputs.JIRA_ID_FROM_BRANCH == true) }}
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi
      - name: Extract and Convert JIRA Keys to Uppercase
        if: ${{ (inputs.JIRA_ID_FROM_BRANCH == true) }}
        run: |
          JIRA_KEYS=$(echo "$BRANCH_NAME" | grep -oEi '^[a-z]+-[0-9]+' || true)
          if [ -n "$JIRA_KEYS" ]; then
            # Convert to uppercase
            JIRA_KEYS_UPPER=$(echo "$JIRA_KEYS" | tr '[:lower:]' '[:upper:]')
            echo "JIRA_KEYS=$JIRA_KEYS_UPPER" >> $GITHUB_ENV
            echo "JIRA_KEYS found and set: $JIRA_KEYS_UPPER"
          else
            echo "Branch name does not contain a valid JIRA key pattern. Skipping JIRA key extraction."
            echo "JIRA_KEYS=" >> $GITHUB_ENV
          fi
      - name: Print JIRA Keys and Branch Name
        if: env.JIRA_KEYS != ''
        run: |
          echo "JIRA Keys: $JIRA_KEYS"
      - name: Skip JIRA Keys Extraction
        if: env.JIRA_KEYS == ''
        run: |
          echo "No valid JIRA keys were found. Skipping steps related to JIRA keys."
      - name: Download Project Artifacts
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ inputs.UPLOAD_ARTIFACT_NAME }}
          merge-multiple: true
      - name: Move to dist
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        run: ${{ env.LAMBDA_MOVE_ARTIFACT_SCRIPT }}
      - name: Setup AWS CLI
        uses: unfor19/install-aws-cli-action@v1.0.4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: ${{ env.TG_VERSION }}
      - name: Apply Terraform
        if: ${{ ( inputs.TERRAGRUNT_PARALLELISM != '') }}
        run: terragrunt run-all apply --terragrunt-non-interactive --terragrunt-parallelism ${{ inputs.TERRAGRUNT_PARALLELISM }} --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Apply Terraform
        if: ${{ ( inputs.TERRAGRUNT_PARALLELISM == '') }}
        run: terragrunt run-all apply --terragrunt-non-interactive --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Confirm Deploy
        run: |
          echo "Deploying to ${{ inputs.TF_VAR_stage }}..."
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "DEPLOY_STATE=successful"  >> $GITHUB_ENV
      - name: Confirm Deploy State and Jira Key Values
        if: always()
        run: |
          echo "DEPLOY_STATE: ${{env.DEPLOY_STATE}}"
          echo "Jira Keys: ${{env.JIRA_KEYS}}"
      - name: Failed Deployment
        if: failure()
        run: echo "DEPLOY_STATE=failed" >> $GITHUB_ENV
      - name: Push Deployment Info to Jira
        if: "${{ env.JIRA_KEYS != '' }}"
        id: push_deployment_info_to_jira
        uses: gravicore/jira-upload-deployment-info@master
        with:
          client-id: "${{ secrets.JIRA_CLIENT_ID }}"
          client-secret: "${{ secrets.JIRA_CLIENT_SECRET }}"
          cloud-instance-base-url: "${{ inputs.ATLASSIAN_URL }}"
          deployment-sequence-number: "${{ github.run_id }}"
          update-sequence-number: "${{ github.run_id }}"
          issue-keys: "${{ env.JIRA_KEYS }}"
          display-name: "${{ inputs.TF_VAR_stage }} Run ID #${{github.run_id}}"
          url: "${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          description: "${{ inputs.TF_VAR_stage }} Deployment"
          last-updated: "${{github.event.head_commit.timestamp}}"
          label: "${{ inputs.TF_VAR_stage }} Deployment Label"
          state: "${{env.DEPLOY_STATE}}"
          pipeline-id: "${{ github.repository }} ${{ github.workflow }}"
          pipeline-display-name: "${{ github.workflow }} (#${{ github.run_number }})"
          pipeline-url: "${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          environment-id: "${{ inputs.TF_VAR_stage }}"
          environment-display-name: "${{ inputs.TF_VAR_stage }}"
          environment-type: "${{ env.JIRA_ENV_TYPE }}"
      - name: Set outputs for AppSync Merge
        id: appsync_merge
        if: inputs.APPSYNC_MERGE != ''
        run: |
          results="[]"
          merges=$(echo "${{ inputs.APPSYNC_MERGE }}" | yq ".")
          for merge in $(echo "${merges}" | yq -o=json | jq -c '.[]'); do
            name=$(echo "${merge}" | jq -r '.name')
            source=$(echo "${merge}" | jq -r '.source')
            target=$(echo "${merge}" | jq -r '.target')
            IFS="=" read -r source_module source_output <<< "${source}"
            IFS="=" read -r target_module target_output <<< "${target}"
            echo "Reading source from ${source}"
            source_value=$(terragrunt run-all output --terragrunt-working-dir ${source_module} -raw ${source_output} --terragrunt-non-interactive)
            echo "Reading target from ${target}"
            target_value=$(terragrunt run-all output --terragrunt-working-dir ${target_module} -raw ${target_output} --terragrunt-non-interactive)
            echo "source=${source_value}"
            echo "target=${target_value}"
            object=$(jq -n --arg name "${name}" --arg source "${source_value}" --arg target "${target_value}" '{name: $name, source: $source, target: $target}')
            results=$(echo "${results}" | jq --argjson object "${object}" '. += [$object]')
            echo "------------"
          done
          results=$(echo "${results}" | jq -c '.')
          echo "results=${results}" >> "$GITHUB_OUTPUT"
