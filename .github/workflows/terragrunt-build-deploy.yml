name: "terragrunt-build-deploy"
on:
  workflow_call:
    inputs:                           ## inputs if "required" MUST be in caller workflow
      TF_VAR_stage:                   ## dev, stg, or prd
        required: true
        type: string
      JIRA_ENV_TYPE:                  ## development, staging, or production
        required: true
        type: string
      TERRAGRUNT_PARALLELISM:
        required: false
        type: number
      TF_VERSION:
        required: true
        type: string
      TG_VERSION:
        required: true
        type: string
      TF_WORKING_DIR:
        required: true
        type: string            
      TERRAGRUNT_LOG_LEVEL:
        required: true
        type: string
      ARTIFACTS_INCLUDE:
        required: false
        type: boolean
      LAMBDA_MOVE_ARTIFACT_SCRIPT:
        required: false
        type: string
      AWS_HOSTED:
        required: false
        type: boolean
      AZURE_HOSTED:
        required: false
        type: boolean
      JIRA_TICKET_INFO:
        required: false
        type: boolean 
    secrets:
      DEV_ACCESS_KEY_ID:
        required: false
      DEV_ACCESS_KEY_SECRET:
        required: false
      STG_ACCESS_KEY_ID:
        required: false
      STG_ACCESS_KEY_SECRET:
        required: false
      PRD_ACCESS_KEY_ID:
        required: false
      PRD_ACCESS_KEY_SECRET:
        required: false
      JIRA_CLIENT_ID:
        required: false
      JIRA_CLIENT_SECRET:
        required: false
env:
  JIRA_ENV_TYPE: ${{ inputs.JIRA_ENV_TYPE }}
  LAMBDA_MOVE_ARTIFACT_SCRIPT: ${{ inputs.LAMBDA_MOVE_ARTIFACT_SCRIPT }}
  TF_VERSION: ${{ inputs.TF_VERSION }}
  TG_VERSION: ${{ inputs.TG_VERSION }}
  TF_WORKING_DIR: ${{ inputs.TF_WORKING_DIR }}
  TERRAGRUNT_LOG_LEVEL: ${{ inputs.TERRAGRUNT_LOG_LEVEL }}
jobs:
  terragrunt-plan:
    # START CONFIGURATION
    name: "Terragrunt Plan"
    env:
      TF_VAR_stage: ${{ inputs.TF_VAR_stage }}
      ACCESS_KEY_ID: ${{ ( secrets.DEV_ACCESS_KEY_ID || secrets.STG_ACCESS_KEY_ID || secrets.PRD_ACCESS_KEY_ID ) }}
      SECRET_ACCESS_KEY: ${{ ( secrets.DEV_ACCESS_KEY_SECRET || secrets.STG_ACCESS_KEY_SECRET || secrets.PRD_ACCESS_KEY_SECRET ) }}
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
    # END CONFIGURATION
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse Jira Keys from Commit
        id: jira_keys
        if: always()
        uses: HighwayThree/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Format Jira Keys
        run: |
          JIRA_KEYS="${{ steps.jira_keys.outputs.jira-keys }}"
          echo "${JIRA_KEYS}" >> .tmp_jira_keys
          echo "JIRA_KEYS=$(grep -o '[A-Z]\+-[0-9]\+' .tmp_jira_keys | tr '\n' ',' | sed 's/,*$//')" >> $GITHUB_ENV
      - name: Echo Jira Keys
        run: |
          echo "Jira Keys: ${{env.JIRA_KEYS}}"
      - name: Download Project Artifacts
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        uses: actions/download-artifact@v2
        with:
          name: project-artifacts
      - name: Move to dist
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        run: ${{ env.LAMBDA_MOVE_ARTIFACT_SCRIPT }}         
      - name: Setup AWS CLI
        if: ${{ (inputs.AWS_HOSTED == true) }}
        uses: unfor19/install-aws-cli-action@v1
      - name: Configure AWS Credentials
        if: ${{ (inputs.AWS_HOSTED == true) }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Azure CLI Action
        if: ${{ (inputs.AZURE_HOSTED == true) }}
        uses: Azure/cli@v1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}
      - name: Validate Terraform
        run: terragrunt validate
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Plan Terraform
        if: ${{ ( inputs.TERRAGRUNT_PARALLELISM == '0') }}
        run: terragrunt run-all plan --terragrunt-non-interactive --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Plan Terraform Parallel
        if: ${{ ( inputs.TERRAGRUNT_PARALLELISM != '0') }}
        run: terragrunt run-all plan --terragrunt-non-interactive --terragrunt-parallelism ${{ inputs.TERRAGRUNT_PARALLELISM }} --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }} 
      - name: Confirm Build
        run: |
          echo "Planning ${{ inputs.TF_VAR_stage }}..."
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "BUILD_STATE=successful"  >> $GITHUB_ENV
      - name: Confirm Build State and Jira Key Values
        if: always()
        run: |
          echo "BUILD_STATE: ${{env.BUILD_STATE}}"
          echo "Jira Keys: ${{env.JIRA_KEYS}}"
      - name: Failed Deployment
        if: failure()
        run: echo "BUILD_STATE=failed" >> $GITHUB_ENV
      - name: Push Build Info to Jira
        if: ${{ (env.JIRA_KEYS != '') && (inputs.JIRA_TICKET_INFO == true) }}
        id: push_build_info_to_jira
        uses: HighwayThree/jira-upload-build-info@master
        with:
          pipeline-id: '${{ github.repository }} ${{ github.workflow }} ${{ inputs.TF_VAR_stage }}'
          client-id: '${{ secrets.JIRA_CLIENT_ID }}'
          client-secret: '${{ secrets.JIRA_CLIENT_SECRET }}'
          cloud-instance-base-url: 'https://celink.atlassian.net/'
          issue-keys: "${{ env.JIRA_KEYS }}"
          build-state: "${{ env.BUILD_STATE }}"
          build-display-name: '${{ github.workflow }}: ${{ inputs.TF_VAR_stage }}'
          build-url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          build-ref-url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
  terragrunt-apply:
    # START CONFIGURATION
    name: "Terragrunt Apply"
    needs: terragrunt-plan
    env:
      TF_VAR_stage: ${{ inputs.TF_VAR_stage }}
      ACCESS_KEY_ID: ${{ ( secrets.DEV_ACCESS_KEY_ID || secrets.STG_ACCESS_KEY_ID || secrets.PRD_ACCESS_KEY_ID ) }}
      SECRET_ACCESS_KEY: ${{ ( secrets.DEV_ACCESS_KEY_SECRET || secrets.STG_ACCESS_KEY_SECRET || secrets.PRD_ACCESS_KEY_SECRET ) }}
      # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    environment:
      name: ${{ inputs.TF_VAR_stage }}
    # END CONFIGURATION
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse Jira Keys from Commit
        id: jira_keys
        if: always()
        uses: HighwayThree/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Format Jira Keys
        run: |
          JIRA_KEYS="${{ steps.jira_keys.outputs.jira-keys }}"
          echo "${JIRA_KEYS}" >> .tmp_jira_keys
          echo "JIRA_KEYS=$(grep -o '[A-Z]\+-[0-9]\+' .tmp_jira_keys | tr '\n' ',' | sed 's/,*$//')" >> $GITHUB_ENV
      - name: Download Project Artifacts
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        uses: actions/download-artifact@v2
        with:
          name: project-artifacts
      - name: Move to dist
        if: ${{ (inputs.ARTIFACTS_INCLUDE == true) }}
        run: ${{ env.LAMBDA_MOVE_ARTIFACT_SCRIPT }}         
      - name: Setup AWS CLI
        if: ${{ (inputs.AWS_HOSTED == true) }}
        uses: unfor19/install-aws-cli-action@v1
      - name: Configure AWS Credentials
        if: ${{ (inputs.AWS_HOSTED == true) }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Azure CLI Action
        if: ${{ (inputs.AZURE_HOSTED == true) }}
        uses: Azure/cli@v1
      - name: Setup Terraform          
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TF_VERSION }}
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}
      - name: Apply Terraform
        if: ${{ ( inputs.TERRAGRUNT_PARALLELISM != '') }}
        run: terragrunt run-all apply --terragrunt-non-interactive --terragrunt-parallelism ${{ inputs.TERRAGRUNT_PARALLELISM }} --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Apply Terraform
        if: ${{ ( inputs.TERRAGRUNT_PARALLELISM == '') }}
        run: terragrunt run-all apply --terragrunt-non-interactive --terragrunt-log-level ${{ env.TERRAGRUNT_LOG_LEVEL }}
        working-directory: ${{ env.TF_WORKING_DIR }}
      - name: Confirm Deploy
        run: |
          echo "Deploying to ${{ inputs.TF_VAR_stage }}..."
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "DEPLOY_STATE=successful"  >> $GITHUB_ENV
      - name: Confirm Deploy State and Jira Key Values
        if: always()
        run: |
          echo "DEPLOY_STATE: ${{env.DEPLOY_STATE}}"
          echo "Jira Keys: ${{env.JIRA_KEYS}}"
      - name: Failed Deployment
        if: failure()
        run: echo "DEPLOY_STATE=failed" >> $GITHUB_ENV
      - name: Push Deployment Info to Jira
        if: ${{ (env.JIRA_KEYS != '') && (inputs.JIRA_TICKET_INFO == true) }}
        id: push_deployment_info_to_jira
        uses: HighwayThree/jira-upload-deployment-info@master
        with:
          client-id: "${{ secrets.JIRA_CLIENT_ID }}"
          client-secret: "${{ secrets.JIRA_CLIENT_SECRET }}"
          cloud-instance-base-url: "https://celink.atlassian.net/"
          deployment-sequence-number: "${{ github.run_id }}"
          update-sequence-number: "${{ github.run_id }}"
          issue-keys: "${{ env.JIRA_KEYS }}"
          display-name: "${{ inputs.TF_VAR_stage }} Run ID #${{github.run_id}}"
          url: "${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          description: "${{ inputs.TF_VAR_stage }} Deployment"
          last-updated: "${{github.event.head_commit.timestamp}}"
          label: "${{ inputs.TF_VAR_stage }} Deployment Label"
          state: "${{env.DEPLOY_STATE}}"
          pipeline-id: "${{ github.repository }} ${{ github.workflow }}"
          pipeline-display-name: "${{ github.workflow }} (#${{ github.run_number }})"
          pipeline-url: "${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          environment-id: "${{ inputs.TF_VAR_stage }}"
          environment-display-name: "${{ inputs.TF_VAR_stage }}"
          environment-type: "${{ env.JIRA_ENV_TYPE }}"
