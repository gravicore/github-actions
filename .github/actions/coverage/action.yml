name: "Coverage"
description: "Coverage for Java and Python"
inputs:
  ref:
    required: false
    type: string
    default: ""
  module:
    required: false
    type: string
    default: ""
  token:
    required: false
    type: string
    default: ""
env:
  DEFAULT_JAVA_VERSION: 18
  DEFAULT_JAVA_COMMAND: "mvn clean package -f java"
  DEFAULT_PYTHON_VERSION: 3.8
  DEFAULT_PYTHON_COMMAND: "python -m coverage run -m pytest python/ && coverage json -o coverage.json"

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}
    - id: setup
      shell: bash
      run: |
        sudo apt-get update && \
        sudo apt-get install -y zip unzip jq snap && \
        sudo snap install yq && \
        python -m pip install --upgrade pip && \
        pip install pytest coverage
        COVERAGE=$(yq eval ".coverage" -o=json .github/setup${{ inputs.module != '' && format('-{0}', inputs.module) || '' }}.yml | jq -c . | sed 's/\\n/\\\\n/g')
        JAVA=$(echo ${COVERAGE} | jq '.java != null')
        PYTHON=$(echo ${COVERAGE} | jq '.python != null')
        echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
        echo "java=${JAVA}" >> $GITHUB_OUTPUT
        echo "python=${PYTHON}" >> $GITHUB_OUTPUT
    - id: java
      if: ${{ steps.setup.outputs.java == 'true' }}
      shell: bash
      run: |
        VERSION="${{ fromJson(steps.setup.outputs.coverage).java.version || env.DEFAULT_JAVA_VERSION }}"
        COMMAND="${{ fromJson(steps.setup.outputs.coverage).java.command || env.DEFAULT_JAVA_COMMAND }}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "command=${COMMAND}" >> $GITHUB_OUTPUT
    - id: python
      if: ${{ steps.setup.outputs.python == 'true' }}
      shell: bash
      run: |
        VERSION="${{ fromJson(steps.setup.outputs.coverage).python.version || env.DEFAULT_PYTHON_VERSION }}"
        COMMAND="${{ fromJson(steps.setup.outputs.coverage).python.command || env.DEFAULT_PYTHON_COMMAND }}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "command=${COMMAND}" >> $GITHUB_OUTPUT
    - if: ${{ steps.setup.outputs.java == 'true' }}
      uses: gravicore/github-actions/.github/actions/setup-java@main
      with:
        organization: ${{ github.repository_owner }}
        password: ${{ inputs.token }}
        version: ${{ steps.java.outputs.version }}
        ref: ${{ inputs.ref }}
    - if: ${{ steps.setup.outputs.python == 'true' }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.python.outputs.version }}
    - if: ${{ steps.setup.outputs.java == 'true' }}
      shell: bash
      run: |
        ${{ steps.java.outputs.command }}
    - if: ${{ steps.setup.outputs.python == 'true' }}
      shell: bash
      run: |
        ${{ steps.python.outputs.command }}
    - if: ${{ steps.setup.outputs.java == 'true' }}
      shell: python
      run: |
        import os
        import csv


        def find_jacoco_files(base_path="./java"):
            jacoco_files = []
            for dir_name in os.listdir(base_path):
                target_dir = os.path.join(base_path, dir_name, "target", "jacoco-ut")
                jacoco_path = os.path.join(target_dir, "jacoco.csv")
                if os.path.isfile(jacoco_path):
                    jacoco_files.append((dir_name, jacoco_path))
            return jacoco_files


        def parse_jacoco_csv(file_path):
            data = []
            with open(file_path, newline="") as csvfile:
                csvreader = csv.DictReader(csvfile)
                for row in csvreader:
                    data.append(row)
            return data


        def main():
            jacoco_files = find_jacoco_files()
            jacoco_data = {}

            for folder_name, file_path in jacoco_files:
                jacoco_data[folder_name] = parse_jacoco_csv(file_path)

            for folder_name, data in jacoco_data.items():
                print(f"Data for {folder_name}:")
                for row in data:
                    print(row)


        main()
